//finding duplicates using merge sort
#include <stdio.h>
void mergeSort(int[], int, int);
void merge(int[], int, int, int);
void print(int[], int);
void findDuplicate(int[], int);
int main()
{
    int arr[100], n;
    printf("Input size of an array:\n");
    scanf("%d", &n);
    printf("Element of an array:\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);
    int size = n;
    printf("Original array: \n");
    printArray(arr, size);

    mergeSort(arr, 0, size - 1);

    printf("Sorted array: \n");
    printArray(arr, size);
    findDuplicate(arr, size);
    return 0;
}

void merge(int arr[], int left, int mid, int right)
{
    int n1 = mid - left + 1;
    int n2 = right - mid;
    int leftArr[n1], rightArr[n2];
    for (int i = 0; i < n1; i++)
        leftArr[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        rightArr[j] = arr[mid + 1 + j];
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2)
    {
        if (leftArr[i] <= rightArr[j])
        {
            arr[k] = leftArr[i];
            i++;
        }
        else
        {
            arr[k] = rightArr[j];
            j++;
        }
        k++;
    }
    while (i < n1)
    {
        arr[k] = leftArr[i];
        i++;
        k++;
    }

    while (j < n2)
    {
        arr[k] = rightArr[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int left, int right)
{
    if (left < right)
    {

        int mid = left + (right - left) / 2;

        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);

        merge(arr, left, mid, right);
    }
}
void printArray(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        printf("%d ", arr[i]);
    }
    printf("\n");
}
void findDuplicate(int arr[], int n)
{
    int dup = 0;
    for (int i = 1; i < n; i++)
    {
        if (arr[i] == arr[i - 1])
        {
            dup = 1;
            printf("%d have duplicate element:\n", arr[i]);
        }
    }
    if (dup == 0)
        printf("no duplicte is here:");
}
